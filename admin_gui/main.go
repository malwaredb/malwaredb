package main

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"errors"
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/data/validation"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
	"github.com/malwaredb/malwaredb/lib/clientlib"
	"github.com/malwaredb/malwaredb/lib/mdbcommon"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"strings"
)

func clientLogin(win fyne.Window, config *clientlib.ClientConfigFile) {
	username := widget.NewEntry()
	username.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "username can only contain letters, numbers, '_', and '-'")
	password := widget.NewPasswordEntry()
	password.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "password can only contain letters, numbers, '_', and '-'")
	server := widget.NewEntry()
	server.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "username can only contain letters, numbers, '_', and '-'")
	items := []*widget.FormItem{
		widget.NewFormItem("Username", username),
		widget.NewFormItem("Password", password),
		widget.NewFormItem("Server", server),
	}

	dialog.ShowForm("Login...", "Log In", "Cancel", items, func(b bool) {
		if !b {
			return
		}

		apiKeyRequest := mdbcommon.GetSetAPIKey{
			UserName:     username.Text,
			UserPassword: string(password.Text),
		}

		result, err := json.Marshal(apiKeyRequest)

		req, err := http.NewRequest("POST", config.HostURL() + "v1/users/getkey", bytes.NewBuffer(result))
		req.Header.Set("Content-Type", "application/json")
		http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			dialog.ShowError(err, win)
			return
		}
		defer resp.Body.Close()

		//fmt.Println("response Status:", resp.Status)
		//fmt.Println("response Headers:", resp.Header)
		body, _ := ioutil.ReadAll(resp.Body)
		//fmt.Println("response Body:", string(body))

		jsonParser := json.NewDecoder(bytes.NewReader(body))
		jsonParser.Decode(&apiKeyRequest)
		if len(apiKeyRequest.APIKey) > 10 {
			err = config.UpdateAPIKey(apiKeyRequest.APIKey)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Failed to update the API key in the config file: %v.", err)
			}
		} else {
			fmt.Fprintf(os.Stderr, "Response message: %s\n", apiKeyRequest.Message)
		}

	}, win)
}

func addUserWindow(win fyne.Window, config *clientlib.ClientConfigFile) {
	var addUserRequest mdbcommon.AdminAddEditUser

	username := widget.NewEntryWithData(binding.BindString(&addUserRequest.Username))
	username.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "username can only contain letters, numbers, '_', and '-'")
	passwordOne := widget.NewPasswordEntry()
	passwordOne.Validator = validation.NewRegexp(`^.{10,}$`, "Password must be >10 characters")
	passwordTwo := widget.NewPasswordEntry()
	passwordTwo.Validator = passwordOne.Validator
	email := widget.NewEntryWithData(binding.BindString(&addUserRequest.Email))
	email.Validator = validation.NewRegexp(`^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,5}$`, "")
	fname := widget.NewEntryWithData(binding.BindString(&addUserRequest.Fname))
	fname.Validator = validation.NewRegexp(`^[A-Za-z]+$`, "First name can only contain letters")
	lname := widget.NewEntryWithData(binding.BindString(&addUserRequest.Lname))
	lname.Validator = validation.NewRegexp(`^[A-Za-z]+$`, "First name can only contain letters")

	items := []*widget.FormItem{
		widget.NewFormItem("Username", username),
		widget.NewFormItem("Password", passwordOne),
		widget.NewFormItem("Verify", passwordTwo),
		widget.NewFormItem("Email", email),
		widget.NewFormItem("First Name", fname),
		widget.NewFormItem("Last Name", lname),
	}


	dialog.ShowForm("Add User", "Add", "Cancel", items, func(b bool) {
		if !b { return }

		if !strings.EqualFold(passwordOne.Text, passwordTwo.Text) {
			dialog.ShowError(errors.New("Passwords do not match"), win)
			return
		}
		addUserRequest.APIKey = config.UserAPIKey
		addUserRequest.Password = passwordOne.Text
		jsonRequest, _ := json.Marshal(addUserRequest)

		req, err := http.NewRequest("POST", config.HostURL() + mdbcommon.AddUser, bytes.NewBuffer(jsonRequest))
		if err != nil {
			dialog.ShowError(err, win)
			return
		}
		req.Header.Set("Content-Type", "application/json")

		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			dialog.ShowError(err, win)
			return
		}
		defer resp.Body.Close()

		body, _ := ioutil.ReadAll(resp.Body)
		jsonParser := json.NewDecoder(bytes.NewReader(body))
		var response mdbcommon.MinimalResponse
		jsonParser.Decode(&response)
		if response.Message == mdbcommon.ERROR0 {
			dialog.ShowInformation("User added", "User account " + addUserRequest.Username + " successfully created.", win)
		} else {
			dialog.ShowError(errors.New(response.Message), win)
		}

	}, win)
}

func main() {
	var clientConfig *clientlib.ClientConfigFile
	var err error

	a := app.NewWithID("net.malwaredb.client.admingui")
	w := a.NewWindow("MalwareDB")

	usersTable := widget.NewTable(
		func() (int, int) { return 0, 3 },
		func() fyne.CanvasObject { return widget.NewLabel("") },
		func(id widget.TableCellID, cell fyne.CanvasObject) {
			label := cell.(*widget.Label)
			if id.Row == 0 {
				switch id.Col {
				case 0:
					label.SetText("User ID")
				case 1:
					label.SetText("Username")
				case 2:
					label.SetText("Email")
				}
			}
		},
	)
	usersTable.SetColumnWidth(0, 60)
	usersTable.SetColumnWidth(1, 80)
	usersTable.SetColumnWidth(2, 100)
	usersTab := container.NewTabItem("Users", usersTable)
	sourcesTab := container.NewTabItem("Sources", widget.NewLabel("Content of tab 2"))

	summaryBox := widget.NewLabel("Summary not yet loaded")
	summaryTab := container.NewTabItem("Summary", summaryBox)

	tabsContainer := container.NewAppTabs(usersTab,sourcesTab, summaryTab)

	//bottomLabel := widget.NewLabel("Bottom")
	//vBox := container.NewVBox(tabsContainer, bottomLabel)

	refreshMenuItem := fyne.NewMenuItem("Refresh", func() {
		if clientConfig != nil {
			info, err := clientConfig.GetServerInfo()
			if err != nil {
				dialog.NewError(err, w)
			} else {
				summaryBox.Text = fmt.Sprintf("MalwareDB v%s on %s %s\nNum samples: %d\nDatabase version: %s\nUptime: %s\n",
					info.DBVersion, info.OSName, info.GoVersion, info.NumSamples, info.DBVersion, info.Uptime)
			}

			usersInfo, err := clientConfig.AdminListUsers()
			if err != nil {
				dialog.NewError(err, w)
			} else {
				usersTable.Length = func() (int, int) { return usersInfo.NumResults+1, 3 } // Num rows + 1 for header
				usersTable.UpdateCell = func(id widget.TableCellID, cell fyne.CanvasObject) {
					label := cell.(*widget.Label)
					if id.Row == 0 {
						switch id.Col {
						case 0:
							label.SetText("User ID")
						case 1:
							label.SetText("Username")
						case 2:
							label.SetText("Email")
						}
					} else {
						switch id.Col {
						case 0:
							label.SetText(strconv.Itoa(int(usersInfo.FoundUsers[id.Row-1].UserID)))
						case 1:
							label.SetText(usersInfo.FoundUsers[id.Row-1].Username)
						case 2:
							label.SetText(usersInfo.FoundUsers[id.Row-1].Email)
						}
					}
				}
				usersTable.Refresh()
			}
		}
	})

	connectMenuItem := fyne.NewMenuItem("Connect", func() {
		clientConfig, err = clientlib.LoadConfig()
		if err != nil {
			clientLogin(w, clientConfig)
			fmt.Fprintf(os.Stderr, "Error connecting: %s\n", err)
		}

		refreshMenuItem.Action()
	})

	addUserMenuItem := fyne.NewMenuItem("Add User", func() {
		clientConfig, err = clientlib.LoadConfig()
		if err != nil {
			clientLogin(w, clientConfig)
			fmt.Fprintf(os.Stderr, "Error connecting: %s\n", err)
		} else {
			addUserWindow(w, clientConfig)
			refreshMenuItem.Action()
		}
	})

	mainMenu := fyne.NewMainMenu(
		// a quit item will be appended to our first menu
		fyne.NewMenu("File", connectMenuItem, refreshMenuItem),
		fyne.NewMenu("Users", addUserMenuItem),
	)
	w.SetMainMenu(mainMenu)

	w.SetContent(tabsContainer) // was vbox
	w.SetMaster()
	w.Resize(fyne.Size{
		Width:  800,
		Height: 600,
	})
	connectMenuItem.Action()
	w.ShowAndRun()
}
