package main

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/validation"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
	"github.com/malwaredb/malwaredb/lib/clientlib"
	"github.com/malwaredb/malwaredb/lib/mdbcommon"
	"io/ioutil"
	"net/http"
	"os"
)

func clientLogin(win fyne.Window, config *clientlib.ClientConfigFile) {
	username := widget.NewEntry()
	username.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "username can only contain letters, numbers, '_', and '-'")
	password := widget.NewPasswordEntry()
	password.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "password can only contain letters, numbers, '_', and '-'")
	server := widget.NewEntry()
	server.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "username can only contain letters, numbers, '_', and '-'")
	items := []*widget.FormItem{
		widget.NewFormItem("Username", username),
		widget.NewFormItem("Password", password),
		widget.NewFormItem("Server", server),
	}

	dialog.ShowForm("Login...", "Log In", "Cancel", items, func(b bool) {
		apiKeyRequest := mdbcommon.GetSetAPIKey{
			UserName:     username.Text,
			UserPassword: string(password.Text),
		}

		result, err := json.Marshal(apiKeyRequest)

		req, err := http.NewRequest("POST", config.HostURL() + "v1/users/getkey", bytes.NewBuffer(result))
		req.Header.Set("Content-Type", "application/json")
		http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			dialog.ShowError(err, win)
			panic(err)
		}
		defer resp.Body.Close()

		//fmt.Println("response Status:", resp.Status)
		//fmt.Println("response Headers:", resp.Header)
		body, _ := ioutil.ReadAll(resp.Body)
		//fmt.Println("response Body:", string(body))

		jsonParser := json.NewDecoder(bytes.NewReader(body))
		jsonParser.Decode(&apiKeyRequest)
		if len(apiKeyRequest.APIKey) > 10 {
			err = config.UpdateAPIKey(apiKeyRequest.APIKey)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Failed to update the API key in the config file: %v.", err)
			}
		} else {
			fmt.Fprintf(os.Stderr, "Response message: %s\n", apiKeyRequest.Message)
		}

	}, win)
}

func main() {
	var clientConfig *clientlib.ClientConfigFile
	var err error

	a := app.New()
	w := a.NewWindow("MalwareDB")

	usersTab := container.NewTabItem("Users", widget.NewLabel("Content of tab 1"))
	sourcesTab := container.NewTabItem("Sources", widget.NewLabel("Content of tab 2"))

	summaryBox := widget.NewLabel("Summary not yet loaded")
	summaryTab := container.NewTabItem("Summary", summaryBox)

	tabsContainer := container.NewAppTabs(usersTab,sourcesTab, summaryTab)

	bottomLabel := widget.NewLabel("Bottom")
	vBox := container.NewVBox(tabsContainer, bottomLabel)

	refreshMenuItem := fyne.NewMenuItem("Refesh", func() {
		if clientConfig != nil {
			info, err := clientConfig.GetServerInfo()
			if err != nil {
				dialog.NewError(err, w)
			} else {
				summaryBox.Text = fmt.Sprintf("MalwareDB v%s on %s %s\nNum samples: %d\nDatabase version: %s\nUptime: %s\n",
					info.DBVersion, info.OSName, info.GoVersion, info.NumSamples, info.DBVersion, info.Uptime)
			}
		}
	})

	connectMenuItem := fyne.NewMenuItem("Connect", func() {
		clientConfig, err = clientlib.LoadConfig()
		if err != nil {
			clientLogin(w, clientConfig)
			fmt.Fprintf(os.Stderr, "Error connecting: %s\n", err)
		}

		refreshMenuItem.Action()
	})



	mainMenu := fyne.NewMainMenu(
		// a quit item will be appended to our first menu
		fyne.NewMenu("File", connectMenuItem, refreshMenuItem),
	)
	w.SetMainMenu(mainMenu)

	w.SetContent(vBox)
	w.SetMaster()
	w.Resize(fyne.Size{
		Width:  500,
		Height: 400,
	})
	connectMenuItem.Action()
	w.ShowAndRun()
}
