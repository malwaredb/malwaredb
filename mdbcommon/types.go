package mdbcommon

const ERROR0 = "OK" // No errors
const ERROR1 = "Unauthorized"
const ERROR2 = "Invalid Request"
const ERROR3 = "Sample Not Found"
const ERROR4 = "Server Error"


// Request, Response same struct. Respond with password empty.
const UserLoginURL string = "/v1/users/getkey"
type GetSetAPIKey struct {
	UserName string `json:"username"`
	UserPassword string `json:"userpassword"`
	APIKey string `json:"apikey"`
}

// Request empty, respond with struct.
const GetServerInfoURL string = "/v1/server/info"
type ServerInfo struct {
	OSName string `json:"OSName"`
	OSVersion string `json:"OSVersion"`
	GoVersion string `json:"GoVersion"`
	MDBVersion string `json:"MSBVersion"`
	DBName string `json:"DBName"`
	DBVersion string `json:"DBVersion"`
	NumSamples int `json:"NumSamples"`
	Uptime string `json:"Uptime"`
}

// Request with struct, respond with error code.
const UploadSampleURL string = "/v1/samples/upload"
type NewSample struct {
	FileName string `json:"FileName"`
	UserKey string `json:"APIKey"`
	FileContentsBase64 string `json:"FileContentsB64"`
}

// Request with SearchSample, respond with SampleInfo or error code.
const SearchBySampleInfoURL string = "/v1/samples/search"
type SearchSample struct {
	SHA1 string `json:"SHA1"`
	SHA256 string `json:"SHA256"`
	SHA512 string `json:"SHA512"`
	MD5 string `json:"MD5"`
	SSDeep string `json:"SSDeep"`
	SDHash string `json:"SDHash"`
	LZJD string `json:"LZJD"`
	SimilarityThreshold float64 `json:"SimilarityThreshold"` // For SSDeep, SDHash, LZJD.
	SendSample bool `json:"SendSample"`
}

type SampleInfo struct {
	SHA1 string `json:"SHA1"`
	SHA256 string `json:"SHA256"`
	SHA512 string `json:"SHA512"`
	MD5 string `json:"MD5"`
	SSDeep string `json:"SSDeep"`
	SDHash string `json:"SDHash"`
	LZJD string `json:"LZJD"`
	FirstUploadDate string `json:"FirstUploadDate"`
	FileCreatedDate string `json:"FileCreatedDate"`
	Entropy float64 `json:"Entropy"`
	ConfirmedMalicious bool `json:"ConfirmedMalicious"`
	FileType string `json:"FileType"`
	Labels []string `json:"Labels"`
	FileContentsBase64 string `json:"FileContentsB64"`
}