package main

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"github.com/rjzak/MalwareDB/mdbcommon"
	"log"
	"net/http"
	"os"
	"runtime"
	"strings"
	"syscall"

	"golang.org/x/crypto/ssh/terminal"
)

const API_PREFIX_V1 string = "/v1/"

func main() {
	fmt.Printf("MalwareDB server %s, built on %s\n", mdbcommon.VERSION, runtime.Version())

	if len(os.Args) == 2 && strings.ToLower(os.Args[1]) == "help" {
		fmt.Println("Options:")
		fmt.Printf("\tCreateConfig - Create skeleton config file in %s.\n", CONFIG_PATH)
		fmt.Printf("\tResetAdmin - Set or reset the admin user's password.\n")
		fmt.Printf("No arguments runs the server.\n")
		os.Exit(0)
	}

	if len(os.Args) == 2 && strings.ToLower(os.Args[1]) == "createconfig" {
		err := GenConfig(CONFIG_PATH)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error creating config file %s: %v.\n", CONFIG_PATH, err)
		} else {
			fmt.Println("Config file created.")
		}
		os.Exit(0)
	}

	configFile, err := LoadConfig()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to find or load configuation file: %s\n", err)
		os.Exit(100)
	}

	if len(os.Args) == 2 && strings.ToLower(os.Args[1]) == "resetadmin" {
		fmt.Print("Enter Password: ")
		password1, err := terminal.ReadPassword(int(syscall.Stdin))
		if err != nil {
			fmt.Fprintf(os.Stderr, "Failed to read password.\n")
			os.Exit(100)
		}

		fmt.Print("\nRe-Enter Password: ")
		password2, err := terminal.ReadPassword(int(syscall.Stdin))
		if err != nil {
			fmt.Fprintf(os.Stderr, "Failed to read password.\n")
			os.Exit(100)
		}

		if bytes.Compare(password1, password2) == 0 {
			derivedKey, err := mdbcommon.PasswordToBytes(password1)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error generating key: %v\n", err)
				os.Exit(100)
			}
			err = configFile.dbDriver.SetPassword(0, derivedKey)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error setting password: %v\n", err)
				os.Exit(100)
			} else {
				fmt.Println("Admin password set successfully.")
				os.Exit(0)
			}
		} else {
			fmt.Fprintf(os.Stderr, "Passwords did not match.\n")
			os.Exit(100)
		}
	}

	fmt.Printf("Number of Files: %d\n", configFile.dbDriver.NumFiles())
	fmt.Printf("Server listening on port %s.\n", configFile.Listen.Port)

	runtime.GOMAXPROCS(configFile.Listen.MaxThreads + 1) // Processing threads + main thread

	cert, err := tls.LoadX509KeyPair(configFile.SSL.Cert, configFile.SSL.Key)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error loading crypto certificates: %v\n", err)
		os.Exit(1)
	}

	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
		w.Header().Add("Strict-Transport-Security", "max-age=63072000; includeSubDomains")
		if req.RequestURI == API_PREFIX_V1+"users/getkey" {
			SetGetAPIKey(w, req, &configFile)
			return
		}
		w.Write([]byte(req.RequestURI))
	})
	confg := &tls.Config{
		MinVersion:               tls.VersionTLS12,
		CurvePreferences:         []tls.CurveID{tls.CurveP521, tls.CurveP384, tls.CurveP256},
		PreferServerCipherSuites: true,
		Certificates: []tls.Certificate{cert},
		CipherSuites: []uint16{
			tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
			tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
			tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
			tls.TLS_RSA_WITH_AES_256_CBC_SHA,
			tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
			tls.TLS_RSA_WITH_AES_128_CBC_SHA256,
		},
	}
	srv := &http.Server{
		Addr:         "0.0.0.0:"+configFile.Listen.Port,
		Handler:      mux,
		TLSConfig:    confg,
		TLSNextProto: make(map[string]func(*http.Server, *tls.Conn, http.Handler), 0),
	}
	log.Fatal(srv.ListenAndServeTLS(configFile.SSL.Cert, configFile.SSL.Key))

	//http.HandleFunc(API_PREFIX_V1+"users/getkey", SetGetAPIKey)
	fmt.Println("Goodbye.")
}
