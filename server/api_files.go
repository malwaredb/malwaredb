package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/rjzak/MalwareDB/mdbcommon"
	"github.com/rjzak/MalwareDB/server/fileprocessing"
	"github.com/rjzak/MalwareDB/server/utils"
	"net/http"
)

func UploadFile(writer http.ResponseWriter, request *http.Request, config *utils.ServerConfigFile) {
	var err error
	jsonParser := json.NewDecoder(request.Body)
	uploadRequest := mdbcommon.NewSample{}
	err = jsonParser.Decode(&uploadRequest)
	if err != nil {
		writer.Write([]byte(mdbcommon.ERROR2))
		fmt.Printf("Error parsing upload struct: %v.\n", err)
		return
	}

	sql := fmt.Sprintf("select id from person where apikey = '%s'", uploadRequest.UserKey)
	apiKeyRow := config.DbDriver.QueryRow(sql)
	userID := -99
	err = apiKeyRow.Scan(&userID)
	if err != nil || userID < 0 {
		writer.Write([]byte("Error getting user ID from apikey"))
		fmt.Printf("SQL error getting User ID for API Key %s: %v.\n", uploadRequest.UserKey, err)
		return
	}

	fileBytes, err := base64.StdEncoding.DecodeString(uploadRequest.FileContentsBase64)
	if err != nil {
		writer.Write([]byte("Error processing file contents"))
		fmt.Printf("Unable to base64 decode uploaded sample: %v.\n", err)
		return
	}

	fileTypeID, err := fileprocessing.FileTypeIDFromBytes(fileBytes, config)
	if err != nil || fileTypeID < 0 {
		writer.Write([]byte("File type not supported"))
		fmt.Printf("Rejected file from user %d for not being a supported file type.\n", userID)
		return
	}

	writer.Write([]byte(mdbcommon.ERROR0))
	go fileprocessing.HandleFileSubmission(uploadRequest.FileName, fileBytes, fileTypeID, userID, uploadRequest.SourceID)
}