package db

import (
	"fmt"
	"database/sql"
	_ "github.com/lib/pq"
	"strings"
)

type PGDB struct {
	dbPtr *sql.DB
}

func (PGDB) Driver() string {
	return "postgres"
}

func (pg *PGDB) Open(host, schema, username, password, portnum string) error {
	var err error
	pg.dbPtr, err = sql.Open("postgres", fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%s sslmode=require", username, password, schema, host, portnum))
	return err
}

func (pg *PGDB) Close() {
	pg.dbPtr.Close()
}

func (pg *PGDB) QueryColumns(table string, columns []string) (*sql.Rows, error) {
	sql := fmt.Sprintf("select %s from %s", strings.Join(columns, ","), table)
	return pg.dbPtr.Query(sql)
}

func (pg *PGDB) RunQuery(sql string) error {
	_, err := pg.dbPtr.Exec(sql)
	return err
}

func (pg *PGDB) SetPassword(userid int, password []byte) error {
	_, err := pg.dbPtr.Exec("update person set password = ($1::bytea) where id = $2", password, userid)
	return err
}

func (pg *PGDB) NumFiles() int {
	sql := fmt.Sprintf("select count(1) from file")
	rows, err := pg.dbPtr.Query(sql)
	if err != nil {
		return -1
	}
	defer rows.Close()
	var numFiles int
	rows.Scan(&numFiles)
	return numFiles
}