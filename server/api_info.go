package main

import (
	"encoding/json"
	"fmt"
	pg "github.com/lib/pq"
	"github.com/malwaredb/malwaredb/mdbcommon"
	"github.com/malwaredb/malwaredb/server/utils"
	"net/http"
	"os"
	"runtime"
)

func ServerInfo(writer http.ResponseWriter, request *http.Request) {
	var err error
	serverContext := utils.GetGlobalContext()
	config := serverContext.ConfigFile
	serverInfo := mdbcommon.ServerInfo{}
	versionRow := config.DbDriver.QueryRow("SHOW server_version;")
	err = versionRow.Scan(&serverInfo.DBVersion)
	if err != nil {
		writer.Write([]byte("Database error"))
		fmt.Printf("Database error getting version number.\n")
		return
	}

	serverInfo.NumSamples = config.NumFiles()
	serverInfo.Uptime = serverContext.TimeRunning().String()
	serverInfo.GoVersion = runtime.Version()
	serverInfo.OSName = runtime.GOOS
	serverInfo.MDBVersion = mdbcommon.VERSION

	result, err := json.Marshal(serverInfo)
	if err != nil {
		writer.Write([]byte("Error creating JSON API Key response"))
		return
	}
	writer.Write(result)
}

func ServerFileTypes(writer http.ResponseWriter, request *http.Request) {
	var fileTypes mdbcommon.ServerFileTypes

	rows, err := utils.GetGlobalContext().ConfigFile.DbDriver.Query("select id, magic, name, executable, description from filetype")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error getting filetype information for API: %s.\n", err)
		fileTypes.NumFileTypes = -1
		result, _ := json.Marshal(fileTypes)
		writer.Write(result)
		return
	}
	defer rows.Close()

	var fileTypeID int = -1
	var magic pg.ByteaArray
	var fileTypeName = ""
	var isExecutable bool
	var typeDesc = ""
	for rows.Next() {
		err = rows.Scan(&fileTypeID, &magic, &fileTypeName, &isExecutable, &typeDesc)
		if err != nil {
			fileTypes.NumFileTypes = -1
			result, _ := json.Marshal(fileTypes)
			writer.Write(result)
			return
		}
		fileTypes.NumFileTypes += 1
		var ftype mdbcommon.FileType
		ftype.TypeName = fileTypeName
		ftype.TypeExecutable = isExecutable
		ftype.Description = typeDesc
		for _, magicNum := range magic {
			ftype.TypeMagic = append(ftype.TypeMagic, fmt.Sprintf("%02X", magicNum))
		}
		fileTypes.FileTypes = append(fileTypes.FileTypes, ftype)
	}

	result, _ := json.Marshal(fileTypes)
	writer.Write(result)
}