package fileprocessing

import (
	"database/sql"
	"fmt"
	"bytes"
	"github.com/rjzak/MalwareDB/mdbcommon"
	"github.com/rjzak/MalwareDB/server/utils"
	"os"
	"strings"
)

func FileTypeIDFromBytes(fileContents []byte, config *utils.ServerConfigFile) (int, error) {
	rows, err := config.DbDriver.Query("select id, magic from filetype")
	if err != nil {
		return -1, err
	}

	var fileTypeID int = -1
	for rows.Next() {
		var magic [][]byte
		err = rows.Scan(&fileTypeID, &magic)
		if err != nil {
			rows.Close()
			return -1, err
		}

		for _, magicNum := range magic {
			if bytes.HasPrefix(fileContents, magicNum) {
				break
			}
		}
	}
	rows.Close()
	return fileTypeID, nil
}

func HandleFileSubmission(fileName string, fileContents []byte, fileType int, userID int, sourceID int) {
	var err error
	context := utils.GetGlobalContext()
	context.GlobalWaitGroup.Add(1)
	defer context.GlobalWaitGroup.Done()

	fileHashes := mdbcommon.GetFileHashesFromBytes(fileContents)
	sqlStatement := fmt.Sprintf("select id from file where sha256 = '%s'", fileHashes.SHA256)
	row := context.ConfigFile.DbDriver.QueryRow(sqlStatement)

	fileID := int64(-9)
	err = row.Scan(&fileID)

	fileNames := make([]string, 0)

	if err == sql.ErrNoRows {
		// File has already been seen
		sqlStatement = fmt.Sprintf("select filename from filesource where fileid = %d and sourceid = %d", fileID, sourceID)
		row := context.ConfigFile.DbDriver.QueryRow(sqlStatement)
		if row.Scan(&fileNames) == sql.ErrNoRows {
			// First time seeing this file from this source
			sqlStatement = fmt.Sprintf("insert into filsource(fileid, sourceid, filename, firstseen) values(%d, %d, {'%s'}, CURRENT_TIMESTAMP", fileID, sourceID, fileName)
			_, err = context.ConfigFile.DbDriver.Exec(sqlStatement)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error inserting new filesource relation for fileID = %d, groupID = %d, fileName = %s: %v\n", fileID, sourceID, fileName, err)
			}
			return
		}

		found := false
		for _, foundFileName := range fileNames {
			if strings.Compare(foundFileName, fileName) == 0 {
				found = true
				break
			}
		}

		if !found {
			// First time seeing this file from this source with this file name
			fileNames = append(fileNames, fileName)
			_, err = context.ConfigFile.DbDriver.Exec("update filesource set filename = %s where fileid = %d and sourceid = %d", fileNames, fileID, sourceID)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error inserting new file name into existing filesource relation for fileID = %d, groupID = %d, fileName = %s: %v\n", fileID, sourceID, fileName, err)
			}
		}
		return
	} else {
		// Add this new file to the database
		fileEntropy := Entropy(fileContents)
		sqlStatement = fmt.Sprintf("insert into file(sha1, sha256, sha512, md5, lzjd, filetypeid, size, entropy) values ('%s', '%s', '%s', '%s', %d, %d, %1.10f", fileHashes.SHA1, fileHashes.SHA256, fileHashes.SHA512, fileHashes.MD5, fileHashes.LZJD, fileType, len(fileContents), fileEntropy)
		_, err = context.ConfigFile.DbDriver.Exec(sqlStatement)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Failed to insert new file record: %v\n", err)
			return
		}
		sqlStatement = fmt.Sprintf("select id from file where sha256 = '%s'", fileHashes.SHA256)
		row = context.ConfigFile.DbDriver.QueryRow(sqlStatement)
		if row.Scan(&fileID) == sql.ErrNoRows {
			fmt.Fprintf(os.Stderr, "Failed to get file id from newly-inserted new file record: %v\n", err)
			return
		}
		sqlStatement = fmt.Sprintf("insert into filsource(fileid, sourceid, filename, firstseen) values(%d, %d, {'%s'}, CURRENT_TIMESTAMP", fileID, sourceID, fileName)
		_, err = context.ConfigFile.DbDriver.Exec(sqlStatement)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Failed to set relationship between fileid %d and sourceid %d for newly-uploaded file: %v\n", fileID, sourceID, err)
		}
	}
}