package fileprocessing

import (
	"bytes"
	"crypto/md5"
	"crypto/sha1"
	"crypto/sha256"
	"crypto/sha512"
	"encoding/base64"
	"encoding/binary"
	"fmt"
	"github.com/malwaredb/golzjd"
	"github.com/rjzak/MalwareDB/mdbcommon"
	"github.com/rjzak/MalwareDB/server/utils"
	"math"
)

func Entropy(p []byte) float64 {
	var r float64 = 0.0
	var dataLen = float64(len(p))
	bs := make([]byte, 2)
	for x := uint16(0); x < 256; x++ {
		binary.LittleEndian.PutUint16(bs, x)
		px := float64(bytes.Count(p, []byte{bs[0]})) / dataLen
		if px > 0 {
			r -= px * math.Log2(px)
		}
	}
	return r
}

func AddFile(sample mdbcommon.NewSample) error {
	connection := utils.GetGlobalContext().ConfigFile.DbDriver
	fileBytes, err := base64.StdEncoding.DecodeString(sample.FileContentsBase64)
	if err != nil {
		return err
	}

	rows, err := connection.Query("select id, magic from filetype")
	if err != nil {
		return err
	}

	var fileTypeID int = -1
	for rows.Next() {
		var magic [][]byte
		rows.Scan(&fileTypeID, magic)

		for _, magicNum := range magic {
			if bytes.HasPrefix(fileBytes, magicNum) {
				break
			}
		}
	}
	rows.Close()

	md5Hash := fmt.Sprintf("%x", md5.Sum(fileBytes))
	sha1Hash := fmt.Sprintf("%x", sha1.Sum(fileBytes))
	sha256Hash := fmt.Sprintf("%x", sha256.Sum256(fileBytes))
	sha512Hash := fmt.Sprintf("%x", sha512.Sum512(fileBytes))
	lzjdHash := golzjd.GenerateHashFromBuffer(fileBytes)

	sqlStatement := "insert into file(sha1, sha256, sha512, md5, lzjd, filetypeid, size, entropy)values($1, $2, $3, $4, $5, $6, $7, $8)"
	_, err = connection.Exec(sqlStatement, sha1Hash, sha256Hash, sha512Hash, md5Hash, lzjdHash, fileTypeID, len(fileBytes), Entropy(fileBytes))
	return err
}