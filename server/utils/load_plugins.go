package utils

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"plugin"
)

func LoadPlugins() {
	dir, _ := filepath.Abs(filepath.Dir(os.Args[0]))
	pluginsDir := filepath.Join(dir, "plugins")

	pluginFiles, err := ioutil.ReadDir(pluginsDir)
	if err != nil {
		// No plugins directory? No problem.
		return
	}
	serverContext := GetGlobalContext()

	for _, pluginFile := range pluginFiles {
		plugin, err := plugin.Open(filepath.Join(pluginsDir, pluginFile.Name()))
		if err != nil {
			fmt.Fprintf(os.Stderr, "Found and failed to load plugin %s: %v.\n", pluginFile.Name(), err)
			continue
		}

		pluginNewFunc, err := plugin.Lookup("New")
		if err != nil {
			fmt.Fprintf(os.Stderr, "Found and load plugin %s, but couldn't cal New(): %v.\n", pluginFile.Name(), err)
			continue
		}

		newFunc, ok := pluginNewFunc.(func() FileTypeHandler)
		if !ok {
			fmt.Fprintf(os.Stderr, "Found and load plugin %s, but New() doesn't have the expected signatur: %v.\n", pluginFile.Name(), err)
			continue
		}

		fmt.Printf("Loaded %s plugin from %s.\n", newFunc().FileTypeName(), pluginFile.Name())
		serverContext.FileTypePlugins = append(serverContext.FileTypePlugins, newFunc())
	}
}