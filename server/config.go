package main

import (
	"malwaredb/server/db"
	"os"
	"fmt"
	"encoding/json"
	"github.com/rjzak/malwaredb"
	"runtime"
	"path/filepath"
	"errors"
	"os/user"
)

const CONFIG_NAME string = "malwaredb.json"

type ServerConfigFile struct {
	FilePath string

	Database struct {
		Driver   string `json:"driver"`
		Host     string `json:"host"`
		Port     string `json:"port"`
		User     string `json:"user"`
		Password string `json:"password"`
		DBName     string `json:"dbname"`
	} `json:"database"`
	Listen struct {
		Host string `json:"host"`
		Port string `json:"port"`
		MaxThreads int `json:"maxThreads"`
	} `json:"listen"`
	StoredSamplesPath string `json:"samplesPath"`

	dbDriver db.DBConnection
}

func ReadConfig(path string) ServerConfigFile {
	var config ServerConfigFile
	configFile, err := os.Open(path)
	defer configFile.Close()
	if err != nil {
		fmt.Println(err.Error())
	}
	jsonParser := json.NewDecoder(configFile)
	jsonParser.Decode(&config)
	config.FilePath = path
	if config.Database.Driver == "postgres" {
		config.dbDriver = &db.PGDB{}
		config.dbDriver.Open(config.Database.Host, config.Database.DBName, config.Database.User, config.Database.Password, config.Database.Port)
	} else {
		fmt.Fprintf(os.Stderr, "Unknown database driver %s.\n", config.Database.Driver)
	}
	return config
}

func GenConfig(path string) error {
	var scf ServerConfigFile

	scf.Database.Host = "postgres.examplehost.com"
	scf.Database.Port = "5432"
	scf.Database.Driver = "postgres"
	scf.Database.User = "exampleUser"
	scf.Database.Password = "examplePassword"
	scf.Database.DBName = "malwaredb"
	scf.Listen.Host = "localhost"
	scf.Listen.Port = "1234"
	scf.Listen.MaxThreads = 50
	scf.StoredSamplesPath = "/var/lib/malwaredb/Samples"

	result, err := json.Marshal(scf)
	if err != nil {
		return err
	}

	f, err := os.Create(path)
	if err != nil {
		return  err
	}

	defer f.Close()
	_, err = f.Write(result)
	if err != nil {
		return err
	}

	return nil
}

func LoadConfig() (ServerConfigFile, error) {
	// First try OS config directory, then user's home directory, then installation directory, and finally, current working directory.
	if runtime.GOOS != "windows" && malwaredb.Exists("/etc/" + CONFIG_NAME) {
		return ReadConfig("/etc/" + CONFIG_NAME), nil
	}

	usr, err := user.Current()
	if err == nil {
		if malwaredb.Exists(usr.HomeDir + "/." + CONFIG_NAME) {
			return ReadConfig(usr.HomeDir + "/." + CONFIG_NAME), nil
		}
	}

	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err == nil {
		if malwaredb.Exists(dir + "/" + CONFIG_NAME) {
			return ReadConfig(dir + "/" + CONFIG_NAME), nil
		}
	}

	if malwaredb.Exists(CONFIG_NAME) {
		return ReadConfig(CONFIG_NAME), nil
	}

	var emptyConfig ServerConfigFile
	return emptyConfig, errors.New("Cannot find configuration file path")
}

func (cf *ServerConfigFile) ListenString() string {
	return fmt.Sprintf("http://%s:%s", cf.Listen.Host, cf.Listen.Port)
}
