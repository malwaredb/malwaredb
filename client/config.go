package main

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/rjzak/MalwareDB/mdbcommon"
	"io/ioutil"
	"net/http"
	"os"
	"os/user"
	"path/filepath"
)

const CONFIG_NAME string = "malwaredb_client.json"

type ClientConfigFile struct {
	FilePath string   `json:"-"`
	ServerHost string `json:"serverHost"`
	ServerPort string `json:"serverPort"`
	UserAPIKey string `json:"apiKey"`
}

func ReadConfig(path string) ClientConfigFile {
	var config ClientConfigFile
	configFile, err := os.Open(path)
	defer configFile.Close()
	if err != nil {
		fmt.Println(err.Error())
	}
	jsonParser := json.NewDecoder(configFile)
	jsonParser.Decode(&config)
	config.FilePath = path
	return config
}

func LoadConfig() (ClientConfigFile, error) {
	// First the user's home directory, then installation directory, and finally, current working directory.
	usr, err := user.Current()
	if err == nil {
		if mdbcommon.Exists(usr.HomeDir + "/." + CONFIG_NAME) {
			return ReadConfig(usr.HomeDir + "/." + CONFIG_NAME), nil
		}
	}

	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err == nil {
		if mdbcommon.Exists(dir + "/" + CONFIG_NAME) {
			return ReadConfig(dir + "/" + CONFIG_NAME), nil
		}
	}

	if mdbcommon.Exists(CONFIG_NAME) {
		return ReadConfig(CONFIG_NAME), nil
	}

	var emptyConfig ClientConfigFile
	return emptyConfig, errors.New("cannot find configuration file path")
}

func CreateEmptyConfig() (string, error) {
	var config ClientConfigFile
	config.ServerHost = "example.com"
	config.ServerPort = "1234"
	config.UserAPIKey = "Login-for-API-key"
	result, err := json.MarshalIndent(config, "", "    ")

	if err != nil {
		return "", err
	}
	usr, err := user.Current()
	configPath := CONFIG_NAME
	if err == nil {
		configPath = filepath.Join(usr.HomeDir, "."+configPath)
	}

	f, err := os.Create(configPath)
	if err != nil {
		return  "", err
	}

	defer f.Close()
	_, err = f.Write(result)
	if err != nil {
		return "", err
	}

	return configPath, nil
}

func (cfg *ClientConfigFile) UpdateAPIKey(apikey string) error {
	cfg.UserAPIKey = apikey
	file, err := os.OpenFile(cfg.FilePath, os.O_RDWR, 0640)
	if err != nil {
		return err
	}
	defer file.Close()

	result, err := json.MarshalIndent(cfg, "", "    ")
	if err != nil {
		return err
	}
	_, err = file.Write(result)
	return err
}

func (cfg *ClientConfigFile) HostURL() string {
	return fmt.Sprintf("https://%s:%s/", cfg.ServerHost, cfg.ServerPort)
}

func (cfg *ClientConfigFile) GetServerInfo() (*mdbcommon.ServerInfo, error) {
	var URL string = fmt.Sprintf("https://%s:%s/%s", cfg.ServerHost, cfg.ServerPort, mdbcommon.GetServerInfoURL)
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	client := &http.Client{}
	req, err := http.NewRequest("GET", URL, bytes.NewBuffer([]byte{}))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	//fmt.Println("response Body:", string(body))

	jsonParser := json.NewDecoder(bytes.NewReader(body))
	var info mdbcommon.ServerInfo
	err = jsonParser.Decode(&info)
	if err != nil {
		return nil, err
	}

	return &info, nil
}

func (cfg *ClientConfigFile) GetSources() (*mdbcommon.Sources, error) {
	var URL string = fmt.Sprintf("https://%s:%s%s", cfg.ServerHost, cfg.ServerPort, mdbcommon.GetFileSources)
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	var sourceRequest mdbcommon.GetSourcesRequest
	sourceRequest.ReleasableOnly = false
	sourceRequest.APIKey = cfg.UserAPIKey
	result, err := json.Marshal(sourceRequest)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", URL, bytes.NewBuffer(result))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	//fmt.Println("response Body:", string(body))

	jsonParser := json.NewDecoder(bytes.NewReader(body))
	var fSources mdbcommon.Sources
	err = jsonParser.Decode(&fSources)
	if err != nil {
		return nil, err
	}

	return &fSources, nil
}

func (cfg *ClientConfigFile) GetSupportedFileTypes() (*mdbcommon.ServerFileTypes, error) {
	var URL string = fmt.Sprintf("https://%s:%s%s", cfg.ServerHost, cfg.ServerPort, mdbcommon.GetServerSupportedFileTypes)
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	client := &http.Client{}
	req, err := http.NewRequest("GET", URL, bytes.NewBuffer([]byte{}))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	//fmt.Println("response Body:", string(body))

	jsonParser := json.NewDecoder(bytes.NewReader(body))
	var types mdbcommon.ServerFileTypes
	err = jsonParser.Decode(&types)
	if err != nil {
		return nil, err
	}
	return &types, nil
}

func (cfg *ClientConfigFile) SearchBasedOnFile(fileContents []byte, similarityThreshold float64) (*mdbcommon.SearchResult, error) {
	fileHashes := mdbcommon.GetFileHashesFromBytes(fileContents)
	searchQuery := fileHashes.GetSearchQuery()
	searchQuery.APIKey = cfg.UserAPIKey
	searchQuery.SimilarityThreshold = similarityThreshold
	result, err := json.Marshal(searchQuery)
	if err != nil {
		return nil, err
	}
	var URL string = fmt.Sprintf("https://%s:%s%s", cfg.ServerHost, cfg.ServerPort, mdbcommon.SearchBySampleInfoURL)
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	req, err := http.NewRequest("POST", URL, bytes.NewBuffer(result))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	jsonParser := json.NewDecoder(bytes.NewReader(body))
	var searchResults mdbcommon.SearchResult
	err = jsonParser.Decode(&searchResults)
	if err != nil {
		return nil, err
	}
	return &searchResults, nil
}