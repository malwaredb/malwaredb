package main

import (
	"os"
	"fmt"
	"errors"
	"encoding/json"
	"github.com/rjzak/MalwareDB/mdbcommon"
	"os/user"
	"path/filepath"
)

const CONFIG_NAME string = "malwaredb_client.json"

type ClientConfigFile struct {
	FilePath string
	ServerHost string `json:"serverHost"`
	ServerPort string `json:"serverPort"`
	UserAPIKey string `json:"apiKey"`
}

func ReadConfig(path string) ClientConfigFile {
	var config ClientConfigFile
	configFile, err := os.Open(path)
	defer configFile.Close()
	if err != nil {
		fmt.Println(err.Error())
	}
	jsonParser := json.NewDecoder(configFile)
	jsonParser.Decode(&config)
	config.FilePath = path
	return config
}

func LoadConfig() (ClientConfigFile, error) {
	// First the user's home directory, then installation directory, and finally, current working directory.
	usr, err := user.Current()
	if err == nil {
		if mdbcommon.Exists(usr.HomeDir + "/." + CONFIG_NAME) {
			return ReadConfig(usr.HomeDir + "/." + CONFIG_NAME), nil
		}
	}

	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err == nil {
		if mdbcommon.Exists(dir + "/" + CONFIG_NAME) {
			return ReadConfig(dir + "/" + CONFIG_NAME), nil
		}
	}

	if mdbcommon.Exists(CONFIG_NAME) {
		return ReadConfig(CONFIG_NAME), nil
	}

	var emptyConfig ClientConfigFile
	return emptyConfig, errors.New("Cannot find configuration file path")
}

func (cfg *ClientConfigFile) HostURL() string {
	return fmt.Sprintf("https://%s:%s/", cfg.ServerHost, cfg.ServerPort)
}