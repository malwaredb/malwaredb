package serverlib

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"github.com/malwaredb/malwaredb/lib/mdbcommon"
	"github.com/malwaredb/malwaredb/lib/serverlib/utils"
	"net/http"
	"os"
)

func AdminVerifyApiKey(apiKey *string) bool {
	config := utils.GetGlobalContext()
	getUID := fmt.Sprintf("select id, uname from person where apikey = '%s'", *apiKey)
	sqlRow := config.ConfigFile.DbDriver.QueryRow(getUID)
	var uid int = -1
	var uname string
	err := sqlRow.Scan(&uid, &uname)
	if err == sql.ErrNoRows {
		return false
	}
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to get user id, username from someone attempting admin access: %s\n", err)
		return false
	}

	if uid == 0 {
		return true
	}

	return AdminUserInAdminGroup(&uid)
}

func AdminUserInAdminGroup(uid *int) bool {
	config := utils.GetGlobalContext()
	getUserGroup := fmt.Sprintf("select gid from usergroup where gid = 0 and pid = %d", uid)
	sqlRow := config.ConfigFile.DbDriver.QueryRow(getUserGroup)
	var gid int = -1
	err := sqlRow.Scan(&gid)
	if err != nil {
		fmt.Fprintf(os.Stderr, "[ADMIN] Failed to get group id for uid: %d : %s\n", uid, err)
		return false
	}

	return gid == 0
}

func AdminListUsers(writer http.ResponseWriter, request *http.Request, config *utils.ServerConfigFile) {
	jsonParser := json.NewDecoder(request.Body)
	adminReq := mdbcommon.MinimalRequest{}
	jsonParser.Decode(&adminReq)

	if !AdminVerifyApiKey(&adminReq.APIKey) {
		noAccess := mdbcommon.MinimalResponse {
			Message: mdbcommon.ERROR1,
		}
		result, _ := json.Marshal(noAccess)
		writer.Write(result)
		return
	}

	allUserInfos := make([]mdbcommon.AdminUserInformation, 0)
	allUsers := "select id, uname, email, firstname, lastname, organisation, phone, created from person"
	userRows, err := config.DbDriver.Query(allUsers)
	if err != nil {
		fmt.Fprintf(os.Stderr, "[ADMIN] User list error: %s\n", err)
		noAccess := mdbcommon.MinimalResponse{
			Message: mdbcommon.ERROR4,
		}
		result, _ := json.Marshal(noAccess)
		writer.Write(result)
		return
	}

	for userRows.Next() {
		var userInfo mdbcommon.AdminUserInformation
		var org sql.NullString
		var phone sql.NullString
		userRows.Scan(&userInfo.UserID, &userInfo.Username, &userInfo.Email, &userInfo.Fname, &userInfo.Lname, &org, phone, &userInfo.Created)
		if org.Valid {
			userInfo.Org = org.String
		} else {
			userInfo.Org = ""
		}
		if phone.Valid {
			userInfo.Phone = phone.String
		} else {
			userInfo.Phone = ""
		}
		allUserInfos = append(allUserInfos, userInfo)
	}

	userResult := mdbcommon.AdminSearchUsersResult{
		MinimalResponse: mdbcommon.MinimalResponse{
			Message: mdbcommon.ERROR0,
		},
		NumResults:      len(allUserInfos),
		FoundUsers:      allUserInfos,
	}

	usersResponse, _ := json.Marshal(userResult)
	writer.Write(usersResponse)
	return
}

func AdminAddEditUser(writer http.ResponseWriter, request *http.Request, config *utils.ServerConfigFile) {
	jsonParser := json.NewDecoder(request.Body)
	addEditUser := mdbcommon.AdminAddEditUser{}
	jsonParser.Decode(&addEditUser)

	if !AdminVerifyApiKey(&addEditUser.APIKey) {
		noAccess := mdbcommon.MinimalResponse {
			Message: mdbcommon.ERROR1,
		}
		result, _ := json.Marshal(noAccess)
		writer.Write(result)
		return
	}

	sqlStatement := fmt.Sprintf("select id, uname from person where email = '%s' and uname = '%s'", addEditUser.Email, addEditUser.Username)
	userResult := config.DbDriver.QueryRow(sqlStatement)

	if userResult == nil {
		noAccess := mdbcommon.MinimalResponse {
			Message: mdbcommon.ERROR3,
		}
		result, _ := json.Marshal(noAccess)
		writer.Write(result)
		return
	}

	var uid int32 = -1
	var uname string = ""
	userResult.Scan(&uid, &uname)

	if uid == addEditUser.UserID {
		sqlStatement = fmt.Sprintf("update person set firstname = '%s', lastname = '%s', organisation = '%s', phone = '%s', email = '%s' where id = %d and uname = '%s'", addEditUser.Fname, addEditUser.Lname, addEditUser.Org, addEditUser.Phone, addEditUser.Email, addEditUser.UserID, addEditUser.Username)
		_, err := config.DbDriver.Exec(sqlStatement)
		if err != nil {
			fmt.Fprintf(os.Stderr, "[ADMIN] Error updating user information for uid: %d, uname: %s: %s\n", uid, addEditUser.Username, err)
			noAccess := mdbcommon.MinimalResponse {
				Message: mdbcommon.ERROR4,
			}
			result, _ := json.Marshal(noAccess)
			writer.Write(result)
			return
		}

		if len(addEditUser.Password) > 10 {
			derivedKey, err := mdbcommon.PasswordToBytes([]byte(addEditUser.Password))
			if err != nil {
				fmt.Fprintf(os.Stderr, "[ADMIN] Error generating key for uid: %d, uname: %s: %s\n", uid, addEditUser.Username, err)
				noAccess := mdbcommon.MinimalResponse {
					Message: mdbcommon.ERROR4,
				}
				result, _ := json.Marshal(noAccess)
				writer.Write(result)
				return
			}
			err = config.SetPassword(int(uid), derivedKey)
			if err != nil {
				fmt.Fprintf(os.Stderr, "[ADMIN] Error setting key for uid: %d, uname: %s: %s\n", uid, addEditUser.Username, err)
				noAccess := mdbcommon.MinimalResponse {
					Message: mdbcommon.ERROR4,
				}
				result, _ := json.Marshal(noAccess)
				writer.Write(result)
				return
			}
		}
		noError := mdbcommon.MinimalResponse{
			Message: mdbcommon.ERROR0,
		}
		result, _ := json.Marshal(noError)
		writer.Write(result)
		return
	} // END editing existing user

	var nullPhone sql.NullString
	var nullOrg sql.NullString
	if len(addEditUser.Phone) > 1 {
		nullPhone.String = addEditUser.Phone
		nullPhone.Valid = true
	}
	if len(addEditUser.Org) > 1 {
		nullOrg.String = addEditUser.Org
		nullOrg.Valid = true
	}

	derivedKey, err := mdbcommon.PasswordToBytes([]byte(addEditUser.Password))
	if err != nil {
		fmt.Fprintf(os.Stderr, "[ADMIN] Error generating key for new user with uname: %s: %s\n", addEditUser.Username, err)
		noAccess := mdbcommon.MinimalResponse {
			Message: mdbcommon.ERROR4,
		}
		result, _ := json.Marshal(noAccess)
		writer.Write(result)
		return
	}

	_, err = config.DbDriver.Exec("insert into person (email, uname, firstname, lastname, phone, organisation, password) values($1, $2, $3, $4, $5, $6, $7::bytea)", addEditUser.Email, addEditUser.Username, addEditUser.Fname, addEditUser.Lname, nullPhone, nullOrg, derivedKey)
	if err != nil {
		fmt.Fprintf(os.Stderr, "[ADMIN] Error adding new user with uname: %s: %s\n", addEditUser.Username, err)
		noAccess := mdbcommon.MinimalResponse {
			Message: mdbcommon.ERROR4,
		}
		result, _ := json.Marshal(noAccess)
		writer.Write(result)
		return
	}

	userResult = config.DbDriver.QueryRow("select id from person where email = $1 and uname = $2", addEditUser.Email, addEditUser.Username)
	uid = -1
	err = userResult.Scan(&uid)
	if err != nil {
		fmt.Fprintf(os.Stderr, "[ADMIN] Error adding getting user id for new user with uname: %s: %s\n", addEditUser.Username, err)
		noAccess := mdbcommon.MinimalResponse {
			Message: mdbcommon.ERROR4,
		}
		result, _ := json.Marshal(noAccess)
		writer.Write(result)
		return
	}

	success := mdbcommon.MinimalResponse {
		Message: mdbcommon.ERROR0,
	}
	result, _ := json.Marshal(success)
	writer.Write(result)
}