package utils

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/malwaredb/malwaredb/lib/mdbcommon"
	_ "github.com/lib/pq"
	"os"
	"os/user"
	"path/filepath"
	"runtime"
	"strings"
)

const (
	CONFIG_NAME string = "malwaredb.json"
	CONFIG_PATH string = "/etc/" + CONFIG_NAME
)

type ServerConfigFile struct {
	FilePath string `json:"-"`

	Database struct {
		Host     string `json:"host"`
		Port     string `json:"port"`
		User     string `json:"user"`
		Password string `json:"password"`
		DBName   string `json:"dbname"`
		SSL      string `json:"ssl"`
	} `json:"database"`
	Listen struct {
		Host string `json:"host"`
		Port string `json:"port"`
		MaxThreads int `json:"maxThreads"`
	} `json:"listen"`
	SSL struct {
		CA string `json:"ca"`
		Cert string `json:"cert"`
		Key string `json:"key"`
	} `json:"ssl,omitempty"`
	StoredSamplesPath string `json:"samplesPath"`
	StoredSamplesDepth int `json:"samplesDepth"`

	DbDriver *sql.DB `json:"-"`
}

func ReadConfig(path string) ServerConfigFile {
	var config ServerConfigFile
	configFile, err := os.Open(path)
	defer configFile.Close()
	if err != nil {
		fmt.Println(err.Error())
	}
	jsonParser := json.NewDecoder(configFile)
	jsonParser.Decode(&config)
	config.FilePath = path
	config.DbDriver, err = sql.Open("postgres", fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%s sslmode=%s", config.Database.User, config.Database.Password, config.Database.DBName, config.Database.Host, config.Database.Port, config.Database.SSL))
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error connecting to database: %v.\n", err)
	}

	return config
}

func GenConfig(path string) error {
	var scf ServerConfigFile

	scf.Database.Host = "postgres.examplehost.com"
	scf.Database.Port = "5432"
	scf.Database.User = "exampleUser"
	scf.Database.Password = "examplePassword"
	scf.Database.DBName = "malwaredb"
	scf.SSL.CA = "/path/to/ca.crt"
	scf.SSL.Cert = "/path/to/cert.crt"
	scf.SSL.Key = "/path/to/key.pem"
	scf.Listen.Host = "localhost"
	scf.Listen.Port = "1234"
	scf.Listen.MaxThreads = 50
	scf.StoredSamplesPath = "/var/lib/malwaredb/Samples"

	result, err := json.MarshalIndent(scf, "", "    ")
	if err != nil {
		return err
	}

	f, err := os.Create(path)
	if err != nil {
		return  err
	}

	defer f.Close()
	_, err = f.Write(result)
	if err != nil {
		return err
	}

	return nil
}

func LoadConfig() (ServerConfigFile, error) {
	// First try OS config directory, then user's home directory, then installation directory, and finally, current working directory.
	if runtime.GOOS != "windows" && mdbcommon.Exists("/etc/" +CONFIG_NAME) {
		return ReadConfig("/etc/" + CONFIG_NAME), nil
	}

	usr, err := user.Current()
	if err == nil {
		if mdbcommon.Exists(usr.HomeDir + "/." + CONFIG_NAME) {
			return ReadConfig(usr.HomeDir + "/." + CONFIG_NAME), nil
		}
	}

	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err == nil {
		if mdbcommon.Exists(dir + "/" + CONFIG_NAME) {
			return ReadConfig(dir + "/" + CONFIG_NAME), nil
		}
	}

	if mdbcommon.Exists(CONFIG_NAME) {
		return ReadConfig(CONFIG_NAME), nil
	}

	var emptyConfig ServerConfigFile
	return emptyConfig, errors.New("Cannot find configuration file path")
}

func (cf *ServerConfigFile) ListenString() string {
	return fmt.Sprintf("http://%s:%s", cf.Listen.Host, cf.Listen.Port)
}

func (cf *ServerConfigFile) UseTLS() bool {
	return len(cf.SSL.CA) + len(cf.SSL.Cert) + len(cf.SSL.Key) > 0
}

func (cf *ServerConfigFile) SetPassword(userid int, password []byte) error {
	_, err := cf.DbDriver.Exec("update person set password = ($1::bytea) where id = $2", password, userid)
	return err
}

func (cf *ServerConfigFile) NumFiles() int {
	sql := fmt.Sprintf("select count(1) from file")
	row := cf.DbDriver.QueryRow(sql)
	var numFiles int = -1
	row.Scan(&numFiles)
	return numFiles
}

func (cf *ServerConfigFile) QueryColumns(table string, columns []string) (*sql.Rows, error) {
	sql := fmt.Sprintf("select %s from %s", strings.Join(columns, ","), table)
	return cf.DbDriver.Query(sql)
}

func (cf *ServerConfigFile) GetDBServerFunctions() ([]string, error) {
	sqlStatement := "select p.oid::regprocedure from pg_proc p join pg_namespace n on p.pronamespace = n.oid where n.nspname not in ('pg_catalog', 'information_schema')"
	rows, err := cf.DbDriver.Query(sqlStatement)
	if err != nil {
		return make([]string, 0), err
	}
	defer rows.Close()
	functions := make([]string, 0)
	for rows.Next() {
		funcName := ""
		if rows.Scan(&funcName) == nil {
			functions = append(functions, funcName)
		}
	}
	return functions, nil
}

func (cf *ServerConfigFile) SSDeepQueryAvailable() bool {
	functions, err := cf.GetDBServerFunctions()
	if err != nil {
		return false
	}
	for _, function := range functions {
		if function == "fuzzy_hash_compare(text,text)" {
			return true
		}
	}
	return false
}

func (cf *ServerConfigFile) LZJDQueryAvailable() bool {
	functions, err := cf.GetDBServerFunctions()
	if err != nil {
		return false
	}
	for _, function := range functions {
		if function == "lzjd_compare(text,text)" {
			return true
		}
	}
	return false
}

func (cf *ServerConfigFile) SDHashQueryAvailable() bool {
	functions, err := cf.GetDBServerFunctions()
	if err != nil {
		return false
	}
	for _, function := range functions {
		if function == "sdhash_compare(text,text)" {
			return true
		}
	}
	return false
}

func (cf *ServerConfigFile) TLSHQueryAvailable() bool {
	functions, err := cf.GetDBServerFunctions()
	if err != nil {
		return false
	}
	for _, function := range functions {
		if function == "tlsh_compare(text,text)" {
			return true
		}
	}
	return false
}